{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"action",
				"action_list"
			],
			[
				"act",
				"action_list"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "# ********************************\n# @author     : Ludovic Bouan\n# @contact    : ludo.bouan@gmail.com\n# title       : Inverted Pendulum / Q-Learning\n# ********************************\n\n# *******************\n# ***** Imports *****\n# *******************\n\nimport os\nimport sys\nimport time\nimport numpy\n\nimport QAgent\nimport enviroment\nimport DbManager\n\nimport logging\nfrom configparser import SafeConfigParser\nfrom logging.handlers import RotatingFileHandler\nimport matplotlib.pyplot as plt\n\n# *******************\n# **** Functions ****\n# *******************\ndef getLogLevel():\n    loglevel = parser.get('Main', 'LogLevel')\n    if loglevel == \"DEBUG\": return logging.DEBUG\n    if loglevel == \"INFO\": return logging.INFO\n    if loglevel == \"ERROR\": return logging.ERROR\n        \ndef general_debug(type, value, traceback):\n    log.error(\"Error : \" + str(type) + \" - \" + str(value))\n\ndef main():\n    #Connect to (or create) database\n    log.debug(os.path.isfile(db_name))\n    if not os.path.isfile(db_name):\n        dbmgr = DbManager.DbManager(db_name)\n        dbmgr.createDb('schema.sql')\n        log.info(\"Database created\")\n    else:\n        dbmgr = DbManager.DbManager(db_name)\n\n    # Setup Graphing\n    k = 0\n    figure, axe = plt.subplots()\n    line1, = axe.plot([],[])\n    line2, = axe.plot([],[])\n    axe.set_autoscaley_on(True)\n    axe.grid()\n    f = open('recompense_moyenne.data', 'r')\n    lines = f.read().split()\n    f.close()\n    for line in lines:\n        k += 1\n        line = line.split(\":\")\n        line1.set_xdata(numpy.append(line1.get_xdata(), k))\n        line1.set_ydata(numpy.append(line1.get_ydata(), line[0]))\n        line2.set_xdata(numpy.append(line2.get_xdata(), k))\n        line2.set_ydata(numpy.append(line2.get_ydata(), line[1]))\n    axe.relim()\n    axe.autoscale_view()\n    figure.canvas.draw()\n    figure.canvas.flush_events()\n\n    # Setup enviroment and agents\n    env         = enviroment.env()\n    UpperQagent = QAgent.QAgentUpper(dbmgr)\n    LowerQagent = QAgent.QAgentLower(dbmgr)\n    log.debug(\"Env set\")\n    log.debug(\"Agent set\")\n\n    # Initial conditions\n    agent         = LowerQagent\n    state         = env.state\n    airtime       = 0\n    max_airtime   = 0\n    follow_reward = 0\n    step          = 0\n    action, greedy_action = agent.policy(state)\n    pause_time = float(parser.get('Main', 'PauseDuration'))\n    max_steps  = float(parser.get('Main', 'max_steps'))\n    log.info(\"Starting\")\n    try:\n        while True:\n            while step < max_steps: \n                log.debug(\"State: {0}\".format(state))\n                log.debug(\"Action: {0}\".format(action))\n                \n                # Get Q from state-action pair\n                Q = agent.getQ(state,action)\n                log.debug(\"Stored Q: {0}\".format(Q))\n\n                # Take Action - move motor\n                env.take_action(action) \n                log.debug(\"Action taken\")\n                \n                # Wait for motor to finish turing (anticipated)\n                while env.read_serial():\n                    pass\n\n                # Get new state and reward\n                new_state, isUpper = env.get_state()\n                R = env.get_reward()\n                log.debug(\"New State: {0}\".format(state))\n                log.debug(\"Reward: {0}\".format(R))\n\n                # Update follow_reward and airtime\n                follow_reward += R\n                if new_state < 9 and new_state >= 8:\n                    airtime += 1\n                    if airtime > max_airtime:\n                        max_airtime = airtime\n                else : airtime = 0\n\n                # Choose upper or lower agent based on state\n                if isUpper:\n                    new_agent = UpperQagent\n                else: \n                    new_agent = LowerQagent\n\n                # Choose new action and theoretical greedy action \n                new_action, greedy_action = new_agent.policy(new_state)\n                log.debug(\"Reward: {0}\".format(R))\n                \n                # Update Q value according to Q value iteration update \n                target = R + GAMMA*new_agent.getQ(new_state, greedy_action)\n                newQ = Q + ALPHA*(target-Q)\n                \n                log.debug(\"New Q: {0}\".format(newQ))\n                agent.setQ(state, action, newQ)\n                log.debug(\"New Q set\")\n                log.debug(\"-----------------\")\n\n                #Update variables\n                state  = new_state\n                agent  = new_agent\n                action = new_action\n                step   += 1\n\n            ### ENTER PAUSE (every `max_steps` steps) ###\n            log.info(\"Pause Started\")\n            log.info(\"AIRTIME : {0}\".format(max_airtime))\n\n            # Averge reward: calculate, save, and graph\n            follow_reward = follow_reward / max_steps\n            f = open('recompense_moyenne.data', 'a')\n            f.write(str(follow_reward) + \":\" + str(max_airtime) + \"\\n\")\n            f.close()\n            line1.set_xdata(numpy.append(line1.get_xdata(), k))\n            line1.set_ydata(numpy.append(line1.get_ydata(), follow_reward))\n            line2.set_xdata(numpy.append(line2.get_xdata(), k))\n            line2.set_ydata(numpy.append(line2.get_ydata(), max_airtime))\n            axe.relim()\n            axe.autoscale_view()\n            figure.canvas.draw()\n            figure.canvas.flush_events()\n            log.info(\"Follow reward : {0}\".format(follow_reward))\n            k             += 1\n            follow_reward = 0\n            max_airtime   = 0\n\n            # Reset and prepare next episode\n            agent = LowerQagent\n            action, greedy_action = agent.policy(state)\n            new_state, isUpper = env.get_state()\n\n            epsilon = (float(parser.get('Coeffs', 'epsilon'))* 0.998) // 0.0001 * 0.0001\n            LowerQagent.epsilon = epsilon\n            UpperQagent.epsilon = epsilon * 1.5\n            parser.set('Coeffs', 'epsilon', str(agent.epsilon))\n            parser.write(open('config.ini','w'))\n            \n            # Delay \n            time.sleep(pause_time)\n\n            step = 0\n            log.info(\"Pause Ended\")\n\n    except KeyboardInterrupt:\n        log.info(\"All ended\")\n        dbmgr.release()\n        exit()\n        \n# ******************\n# *** Global Var ***\n# ******************\n\n# Config\nparser = SafeConfigParser()\nparser.read('config.ini')\n\n#Log\nlog = logging.getLogger('root')\nlog.setLevel(getLogLevel())\nstream = logging.StreamHandler(sys.stdout)\nstream.setLevel(getLogLevel())\nformatter = logging.Formatter('[%(asctime)s] %(levelname)8s %(module)15s: %(message)s')\nstream.setFormatter(formatter)\nlog.addHandler(stream)\nfile_handler = RotatingFileHandler('debug.log', 'a', 1000000, 1)\nfile_handler.setLevel(logging.DEBUG)\nfile_handler.setFormatter(formatter)\nlog.addHandler(file_handler)\n\n#DbManager\ndb_name = parser.get('Main', 'DbName')\n\n#Coeffs\nGAMMA = float(parser.get('Coeffs', 'GAMMA'))\nALPHA = float(parser.get('Coeffs', 'ALPHA'))\n\n#sys.excepthook = general_debug\n\nplt.ion()\n\n# ******************\n# ****** Main ******\n# ******************\nif __name__ == \"__main__\":\n    main()",
			"file": "QAlgo.py",
			"file_size": 7342,
			"file_write_time": 131009834675273378,
			"settings":
			{
				"buffer_size": 7119,
				"line_ending": "Windows"
			}
		},
		{
			"file": "angle.txt",
			"settings":
			{
				"buffer_size": 264,
				"line_ending": "Windows"
			}
		},
		{
			"file": "enviroment.py",
			"settings":
			{
				"buffer_size": 3528,
				"line_ending": "Windows"
			}
		},
		{
			"file": "graphData.py",
			"settings":
			{
				"buffer_size": 326,
				"line_ending": "Windows"
			}
		},
		{
			"file": "QAgent.py",
			"settings":
			{
				"buffer_size": 3453,
				"line_ending": "Windows"
			}
		},
		{
			"file": "config.ini",
			"settings":
			{
				"buffer_size": 226,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 219.0,
		"last_filter": "floo",
		"selected_items":
		[
			[
				"floo",
				"Floobits - Join Workspace"
			],
			[
				"floobits fo",
				"Floobits - Stop Following Workspace"
			],
			[
				"floobits",
				"Floobits - Open Workspace in a Google+ Hangout"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"floobits l",
				"Floobits - Delete Workspace"
			],
			[
				"git",
				"Git: Init"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"floobits join",
				"Floobits - Join Workspace"
			],
			[
				"Pa",
				"Package Control: Install Package"
			]
		],
		"width": 528.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"exit()",
			"pip",
			"pip install chaco",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
	],
	"file_history":
	[
		"/C/TIPE/inverted-pendulum/recompense_moyenne.data",
		"/C/TIPE/inverted-pendulum/enviroment.py",
		"/C/TIPE/inverted-pendulum/speed.txt",
		"/C/TIPE/inverted-pendulum/angle.txt",
		"/C/TIPE/inverted-pendulum/config.ini",
		"/C/TIPE/inverted-pendulum/DbManager.py",
		"/C/TIPE/inverted-pendulum/schema.sql",
		"/C/TIPE/inverted-pendulum/graphData.py",
		"/C/TIPE/inverted-pendulum/QAlgo.py",
		"/C/TIPE/inverted-pendulum/Arduino/Arduino_codev2/Arduino_codev2.ino",
		"/C/TIPE/floobits/QAgent.py",
		"/C/TIPE/floobits/DbManager.py",
		"/C/TIPE/floobits/enviroment.py",
		"/C/TIPE/floobits/QAlgo.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"j"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "QAlgo.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7119,
						"regions":
						{
						},
						"selection":
						[
							[
								6198,
								6198
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1487.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "angle.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 264,
						"regions":
						{
						},
						"selection":
						[
							[
								264,
								264
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "enviroment.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3528,
						"regions":
						{
						},
						"selection":
						[
							[
								2607,
								2607
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 769.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "graphData.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 326,
						"regions":
						{
						},
						"selection":
						[
							[
								33,
								274
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "QAgent.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3453,
						"regions":
						{
						},
						"selection":
						[
							[
								1583,
								1583
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 510.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "config.ini",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 226,
						"regions":
						{
						},
						"selection":
						[
							[
								226,
								226
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Arduino_codev2":
	{
		"height": 100.0
	},
	"output.exec":
	{
		"height": 25.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.stino_log":
	{
		"height": 100.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "inverted-pendulum.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 134.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
